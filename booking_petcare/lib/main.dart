import 'dart:convert';
import 'package:booking_petcare/Global/Constant.dart';
import 'package:booking_petcare/Router/AppPage.dart';
import 'package:booking_petcare/Services/PushNotification.dart';
import 'package:booking_petcare/Services/TranslationService.dart';
import 'package:booking_petcare/Utils/Utils.dart';
import 'package:booking_petcare/firebase_options.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'dart:io';

import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;

// import 'package:timeago/src/messages/vi_messages.dart' as vi_short_messages;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  Locale savedLocale = await TranslationService.getSavedLocale();

  tz.initializeTimeZones();
  tz.setLocalLocation(tz.getLocation('Asia/Ho_Chi_Minh'));

  // ‚úÖ Kh·ªüi t·∫°o Firebase m·ªôt l·∫ßn duy nh·∫•t
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // ‚úÖ ƒêƒÉng k√Ω x·ª≠ l√Ω khi th√¥ng b√°o nh·∫≠n ·ªü background
  FirebaseMessaging.onBackgroundMessage(firebaseBackgroundMessage);

  // ‚úÖ Kh·ªüi t·∫°o th√¥ng b√°o (local + Firebase Cloud Messaging)
  await PushNotifications.localNotiInit();
  await PushNotifications.init();
  await savetoken();
  await _requestPermissions();

  runApp(MyApp(initialLocale: savedLocale));
}

class MyApp extends StatelessWidget {
  final Locale initialLocale;
  const MyApp({super.key, required this.initialLocale});
  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Booking PetCare',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      // C·∫•u h√¨nh d·ªãch ng√¥n ng·ªØ cho GetMaterialApp
      locale: initialLocale, // ƒê·∫∑t ng√¥n ng·ªØ ban ƒë·∫ßu d·ª±a tr√™n gi√° tr·ªã ƒë√£ l∆∞u
      fallbackLocale: TranslationService.fallbackLocale, // Ng√¥n ng·ªØ d·ª± ph√≤ng
      translations: TranslationService(),

      initialRoute: Routes.splash,
      getPages: AppPages.routes,
    );
  }
}

Future<void> _requestPermissions() async {
  // 1. Y√™u c·∫ßu quy·ªÅn hi·ªÉn th·ªã th√¥ng b√°o (gi·ªØ nguy√™n)
  final notificationStatus = await Permission.notification.status;
  if (notificationStatus.isDenied || notificationStatus.isPermanentlyDenied) {
    if (Platform.isIOS) {
      await Permission.notification.request();
    } else if (Platform.isAndroid) {
      await Permission.notification.request();
    }
  } else {
    print('Quy·ªÅn th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c c·∫•p');
  }

  // 2. X·ª≠ l√Ω quy·ªÅn li√™n quan ƒë·∫øn b√°o th·ª©c cho Android
  if (Platform.isAndroid) {
    final androidInfo = await DeviceInfoPlugin().androidInfo;
    if (androidInfo.version.sdkInt >= 31) {
      // Android 12 (SDK 31) tr·ªü l√™n
      final alarmStatus = await Permission.scheduleExactAlarm.status;
      print('Tr·∫°ng th√°i quy·ªÅn b√°o th·ª©c ch√≠nh x√°c (Android 12+): $alarmStatus');
      if (alarmStatus.isDenied || alarmStatus.isPermanentlyDenied) {
        final newAlarmStatus = await Permission.scheduleExactAlarm.request();
        if (newAlarmStatus.isGranted) {
          print('ƒê√£ c·∫•p quy·ªÅn b√°o ƒë·ªông ch√≠nh x√°c (Android 12+)');
        } else {
          print('Quy·ªÅn b√°o ƒë·ªông ch√≠nh x√°c b·ªã t·ª´ ch·ªëi (Android 12+)');
        }
      } else {
        print('Quy·ªÅn b√°o ƒë·ªông ch√≠nh x√°c ƒë√£ ƒë∆∞·ª£c c·∫•p (Android 12+)');
      }
    } else {
      // Cho c√°c phi√™n b·∫£n Android nh·ªè h∆°n 12 (v√≠ d·ª•: Android 9 c·ªßa b·∫°n)
      print(
          'Thi·∫øt b·ªã ƒëang ch·∫°y Android ${androidInfo.version.release} (SDK ${androidInfo.version.sdkInt}).');
      print(
          'Tr√™n phi√™n b·∫£n n√†y, quy·ªÅn SCHEDULE_EXACT_ALARM kh√¥ng ƒë∆∞·ª£c y√™u c·∫ßu th√¥ng qua permission_handler theo c√°ch c·ªßa Android 12+.');
      print(
          'ƒê·ªÉ ƒë·∫∑t b√°o th·ª©c ch√≠nh x√°c, h√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ khai b√°o c√°c quy·ªÅn c·∫ßn thi·∫øt trong AndroidManifest.xml (v√≠ d·ª•: android.permission.WAKE_LOCK) n·∫øu ·ª©ng d·ª•ng c·ªßa b·∫°n c·∫ßn ƒë√°nh th·ª©c thi·∫øt b·ªã.');
      // B·∫°n kh√¥ng c·∫ßn g·ªçi Permission.scheduleExactAlarm.request() ·ªü ƒë√¢y v√¨ n√≥ kh√¥ng √°p d·ª•ng.
      // Vi·ªác ƒë·∫∑t b√°o th·ª©c ch√≠nh x√°c tr√™n c√°c phi√™n b·∫£n n√†y ƒë∆∞·ª£c th·ª±c hi·ªán qua AlarmManager
      // v√† th∆∞·ªùng kh√¥ng y√™u c·∫ßu m·ªôt quy·ªÅn runtime ri√™ng bi·ªát nh∆∞ SCHEDULE_EXACT_ALARM.
    }
  }
}

/// ‚úÖ H√†m x·ª≠ l√Ω th√¥ng b√°o khi app ƒëang background
Future<void> firebaseBackgroundMessage(RemoteMessage message) async {
  // B·∫°n c√≥ th·ªÉ x·ª≠ l√Ω logic ·ªü ƒë√¢y n·∫øu c·∫ßn
  print("üîî Background message: ${message.notification?.title}");
  // V√≠ d·ª•: Hi·ªÉn th·ªã local notification khi nh·∫≠n ·ªü background (t√πy ch·ªçn)
  if (message.notification != null) {
    PushNotifications.showSimpleNotification(
      title: 'Th√¥ng b√°o m·ªõi',
      body: message.notification!.body ?? '',
      payload: jsonEncode(message.data),
    );
  }
}

savetoken() async {
  final pushNotifications = PushNotifications();
  try {
    String? idStr = await Utils.getStringValueWithKey(Constant.ID_NGUOIDUNG);
    if (idStr == null) return;

    int idnguoidung = int.parse(idStr); // √âp ki·ªÉu t·∫°i ƒë√¢y

    await pushNotifications.saveFcmToken(idnguoidung);
  } catch (e, stack) {
    debugPrint('EXCEPTION khi saveFcmToken: $e');
    debugPrint('$stack');
  }
}
