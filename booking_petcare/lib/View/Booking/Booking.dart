import 'package:booking_petcare/Controller/Appointment/AppointmentController.dart';
import 'package:booking_petcare/Controller/Booking/BookingController.dart';
import 'package:booking_petcare/Controller/Center/CenterController.dart';
import 'package:booking_petcare/Controller/Pets/PetsController.dart';
import 'package:booking_petcare/Controller/Services/ServiceController.dart';
import 'package:booking_petcare/Utils/Utils.dart';
import 'package:booking_petcare/Widgets/ServiceModal_Booking/ServiceModalContent.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';

class Booking extends StatelessWidget {
  // final BookingController controller = Get.put(BookingController());
  final AppointmentController controller = Get.put(AppointmentController());
  final CenterController centerController = Get.put(CenterController());
  final ServiceController serviceController = Get.put(ServiceController());
  final PetsController petsController = Get.put(PetsController());

  Booking({super.key});

  @override
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        iconTheme: const IconThemeData(color: Colors.white),
        title: const Text(
          'ƒê·∫∑t l·ªãch chƒÉm s√≥c',
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: Colors.blue,
        // centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Card Th√¥ng tin trung t√¢m v√† ng∆∞·ªùi d√πng
              Obx(() {
                if (centerController.isLoading.value) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (centerController.center.value == null) {
                  return const Center(
                      child: Text('Kh√¥ng c√≥ th√¥ng tin trung t√¢m'));
                }
                final center = centerController.center.value!;
                return Card(
                  color: Colors.white,
                  elevation: 4,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "üè¢ Trung t√¢m: ${center.tentrungtam}",
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          "üìç ƒê·ªãa ch·ªâ: ${center.diachi}",
                          style: const TextStyle(fontSize: 14),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          "üìû S·ªë ƒëi·ªán tho·∫°i: ${center.sodienthoai}",
                          style: const TextStyle(fontSize: 14),
                        ),
                      ],
                    ),
                  ),
                );
              }),

              const SizedBox(height: 24),

              // Ch·ªçn th√∫ c∆∞ng
              const Text(
                "üêæ Ch·ªçn th√∫ c∆∞ng",
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              const SizedBox(height: 8),
              Obx(() => Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.blue),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        isExpanded: true,
                        value: controller.selectedPet.value.isEmpty
                            ? null
                            : controller.selectedPet.value,
                        hint: const Text('Ch·ªçn th√∫ c∆∞ng'),
                        items: petsController.pets.map((pet) {
                          return DropdownMenuItem<String>(
                            value: pet.idthucung
                                .toString(), // d√πng idthucung l√†m value
                            child: Text(pet.tenthucung),
                          );
                        }).toList(),
                        onChanged: (value) {
                          controller.selectedPet.value = value ?? '';
                        },
                      ),
                    ),
                  )),

              const SizedBox(height: 24),

              // Ch·ªçn d·ªãch v·ª•
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    "üõÅ D·ªãch v·ª•",
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                  const SizedBox(height: 8),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.list_alt_rounded),
                    label: Obx(() => Text(controller.selectedServiceIds.isEmpty
                        ? 'Ch·ªçn d·ªãch v·ª•'
                        : 'ƒê√£ ch·ªçn ${controller.selectedServiceIds.length} d·ªãch v·ª•')),
                    style: ElevatedButton.styleFrom(
                      minimumSize: const Size(double.infinity, 48),
                      backgroundColor: Colors.white, // M√†u n·ªÅn
                      foregroundColor: Colors.blue, // M√†u ch·ªØ v√† icon
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: const BorderSide(color: Colors.blue)),
                    ),
                    onPressed: () {
                      Get.bottomSheet(
                        const ServiceModalContent(),
                        backgroundColor: Colors.white,
                        isScrollControlled: true, // Cho ph√©p n·ªôi dung d√†i h∆°n
                        shape: const RoundedRectangleBorder(
                          borderRadius:
                              BorderRadius.vertical(top: Radius.circular(16)),
                        ),
                      );
                    },
                  ),
                  // Hi·ªÉn th·ªã t√™n c√°c d·ªãch v·ª• ƒë√£ ch·ªçn (t√πy ch·ªçn)
                  Obx(() {
                    if (controller.selectedServiceIds.isNotEmpty) {
                      return Padding(
                        padding: const EdgeInsets.only(top: 8.0),
                        child: Text(
                          "ƒê√£ ch·ªçn: ${controller.getSelectedServiceNames()}",
                          style: const TextStyle(color: Colors.black54),
                        ),
                      );
                    }
                    return const SizedBox.shrink();
                  }),
                ],
              ),
              const SizedBox(height: 24),

              // Ch·ªçn ng√†y
              const Text(
                "üóìÔ∏è Ng√†y h·∫πn",
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              const SizedBox(height: 8),
              Obx(() => GestureDetector(
                    onTap: () async {
                      DateTime? picked = await showDatePicker(
                        context: context,
                        initialDate: controller.selectedDate.value,
                        firstDate: DateTime.now(),
                        lastDate: DateTime.now().add(const Duration(days: 365)),
                      );
                      if (picked != null) {
                        controller.selectedDate.value = picked;
                      }
                    },
                    child: Container(
                      width: double.infinity,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 14),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(DateFormat('dd/MM/yyyy')
                              .format(controller.selectedDate.value)),
                          const Icon(Icons.calendar_today, color: Colors.blue),
                        ],
                      ),
                    ),
                  )),

              const SizedBox(height: 24),

              // Ch·ªçn gi·ªù
              const Text(
                "‚è∞ Gi·ªù h·∫πn",
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              const SizedBox(height: 8),
              Obx(() => GestureDetector(
                    onTap: () async {
                      DateTime now = DateTime.now();
                      DateTime selectedDate = controller
                          .selectedDate.value; // Ng√†y ƒë√£ ch·ªçn t·ª´ DatePicker

                      TimeOfDay initialTimeForPicker =
                          controller.selectedTime.value;
                      bool isSelectedDateToday =
                          selectedDate.year == now.year &&
                              selectedDate.month == now.month &&
                              selectedDate.day == now.day;

                      if (isSelectedDateToday) {
                        TimeOfDay currentTimeOfDay =
                            TimeOfDay.fromDateTime(now);
                        // N·∫øu gi·ªù hi·ªán t·∫°i trong controller ƒë√£ l√† qu√° kh·ª© so v·ªõi gi·ªù th·ª±c t·∫ø,
                        // th√¨ ƒë·∫∑t initialTime cho picker l√† gi·ªù th·ª±c t·∫ø
                        if ((controller.selectedTime.value.hour <
                                currentTimeOfDay.hour) ||
                            (controller.selectedTime.value.hour ==
                                    currentTimeOfDay.hour &&
                                controller.selectedTime.value.minute <
                                    currentTimeOfDay.minute)) {
                          initialTimeForPicker = currentTimeOfDay;
                        }
                      }

                      TimeOfDay? picked = await showTimePicker(
                        context: context,
                        initialTime:
                            initialTimeForPicker, // S·ª≠ d·ª•ng initialTime ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh
                      );

                      if (picked != null) {
                        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa gi·ªù ƒë√£ ch·ªçn
                        if (isSelectedDateToday) {
                          // T·∫°o ƒë·ªëi t∆∞·ª£ng DateTime t·ª´ ng√†y ƒë√£ ch·ªçn v√† gi·ªù v·ª´a pick
                          DateTime pickedDateTime = DateTime(
                            selectedDate.year,
                            selectedDate.month,
                            selectedDate.day,
                            picked.hour,
                            picked.minute,
                          );

                          // So s√°nh v·ªõi th·ªùi ƒëi·ªÉm hi·ªán t·∫°i (ch·ªâ c·∫ßn ch√≠nh x√°c ƒë·∫øn ph√∫t)
                          // DateTime currentDateTimeForComparison = DateTime(now.year, now.month, now.day, now.hour, now.minute);
                          // Th·ª±c ra so s√°nh tr·ª±c ti·∫øp v·ªõi "now" l√† ƒë·ªß, v√¨ pickedDateTime ƒë√£ bao g·ªìm ng√†y
                          // v√† ch√∫ng ta ch·ªâ quan t√¢m khi isSelectedDateToday = true

                          if (pickedDateTime.isBefore(now)) {
                            // N·∫øu gi·ªù ƒë√£ ch·ªçn l√† trong qu√° kh·ª© c·ªßa ng√†y h√¥m nay

                            Get.snackbar(
                              'Gi·ªù kh√¥ng h·ª£p l·ªá',
                              'Vui l√≤ng ch·ªçn m·ªôt gi·ªù trong t∆∞∆°ng lai cho ng√†y h√¥m nay.',
                              snackPosition: SnackPosition.TOP,
                              backgroundColor: Colors.red,
                              colorText: Colors.white,
                            );

                            return; // Kh√¥ng c·∫≠p nh·∫≠t gi·ªù
                          }
                        }
                        // N·∫øu h·ª£p l·ªá (ng√†y t∆∞∆°ng lai, ho·∫∑c ng√†y h√¥m nay nh∆∞ng gi·ªù h·ª£p l·ªá)
                        controller.selectedTime.value = picked;
                      }
                    },
                    child: Container(
                      width: double.infinity,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 14),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(controller.selectedTime.value.format(context)),
                          const Icon(Icons.access_time, color: Colors.blue),
                        ],
                      ),
                    ),
                  )),

              const SizedBox(height: 24),

              Obx(() => Card(
                    color: Colors.white,
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16)),
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Th√¥ng tin ƒë·∫∑t l·ªãch',
                            style: TextStyle(
                                fontSize: 18, fontWeight: FontWeight.bold),
                          ),
                          const SizedBox(height: 12),
                          Text('üë§ Ng∆∞·ªùi d√πng: ${controller.userName.value}'),
                          Text(
                              'üìû S·ªë ƒëi·ªán tho·∫°i: ${controller.phoneNumber.value}'),
                          Text('üè† ƒê·ªãa ch·ªâ: ${controller.address.value}'),
                          const Divider(height: 24, thickness: 1),
                          Text(
                              'üêæ Th√∫ c∆∞ng: ${controller.getSelectedPetName()}'),
                          Text(
                              'üõÅ D·ªãch v·ª•: ${controller.getSelectedServiceNames()}'),
                          Text(
                              'üóìÔ∏è Ng√†y: ${DateFormat('dd/MM/yyyy').format(controller.selectedDate.value)}'),
                          Text(
                              '‚è∞ Gi·ªù: ${controller.selectedTime.value.format(Get.context!)}'),
                        ],
                      ),
                    ),
                  )),

              const SizedBox(height: 24),

              // N√∫t ƒë·∫∑t l·ªãch
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                    icon: const Icon(
                      Icons.check,
                      size: 24,
                      color: Colors.white,
                    ),
                    label: const Text(
                      'ƒê·∫∑t l·ªãch ngay',
                      style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.white),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      elevation: 4,
                    ),
                    onPressed: () async {
                      bool confirm = await showDialog(
                        context: context,
                        builder: (context) => AlertDialog(
                          title: const Text('X√°c nh·∫≠n ƒë·∫∑t l·ªãch'),
                          content: const Text(
                              'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t l·ªãch h·∫πn n√†y kh√¥ng?'),
                          actions: [
                            TextButton(
                              onPressed: () => Navigator.of(context).pop(false),
                              child: const Text('H·ªßy'),
                            ),
                            TextButton(
                              onPressed: () => Navigator.of(context).pop(true),
                              child: const Text('X√°c nh·∫≠n'),
                            ),
                          ],
                        ),
                      );

                      if (confirm == true) {
                        bool success = await controller
                            .submitBooking(); // submitBooking s·∫Ω tr·∫£ v·ªÅ true n·∫øu h·ª£p l·ªá

                        if (success) {
                          await Future.delayed(const Duration(seconds: 2));
                          Get.offNamed('/appointmentList');
                        }
                      }
                    }),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
