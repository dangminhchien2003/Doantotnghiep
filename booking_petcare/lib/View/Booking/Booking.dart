import 'package:booking_petcare/Controller/Appointment/AppointmentController.dart';
import 'package:booking_petcare/Controller/Booking/BookingController.dart';
import 'package:booking_petcare/Controller/Center/CenterController.dart';
import 'package:booking_petcare/Controller/Pets/PetsController.dart';
import 'package:booking_petcare/Controller/Services/ServiceController.dart';
import 'package:booking_petcare/Utils/Utils.dart';
import 'package:booking_petcare/View/Pets/AddPets.dart';
import 'package:booking_petcare/Widgets/ServiceModal_Booking/ServiceModalContent.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';

class Booking extends StatelessWidget {
  // final BookingController controller = Get.put(BookingController());
  final AppointmentController controller = Get.put(AppointmentController());
  final CenterController centerController = Get.put(CenterController());
  final ServiceController serviceController = Get.put(ServiceController());
  final PetsController petsController = Get.put(PetsController());

  Booking({super.key});

  @override
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        iconTheme: const IconThemeData(color: Colors.white),
        title: const Text(
          'ƒê·∫∑t l·ªãch chƒÉm s√≥c',
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor: Colors.blue,
        // centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Card Th√¥ng tin trung t√¢m v√† ng∆∞·ªùi d√πng
              Obx(() {
                if (centerController.isLoading.value) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (centerController.center.value == null) {
                  return const Center(
                      child: Text('Kh√¥ng c√≥ th√¥ng tin trung t√¢m'));
                }
                final center = centerController.center.value!;
                return Card(
                  color: Colors.white,
                  elevation: 4,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "üè¢ Trung t√¢m: ${center.tentrungtam}",
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          "üìç ƒê·ªãa ch·ªâ: ${center.diachi}",
                          style: const TextStyle(fontSize: 14),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          "üìû S·ªë ƒëi·ªán tho·∫°i: ${center.sodienthoai}",
                          style: const TextStyle(fontSize: 14),
                        ),
                      ],
                    ),
                  ),
                );
              }),

              const SizedBox(height: 24),

              // Ch·ªçn th√∫ c∆∞ng
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment
                    .center, // CƒÉn gi·ªØa c√°c item theo chi·ªÅu d·ªçc
                children: [
                  const Text(
                    "üêæ Ch·ªçn th√∫ c∆∞ng",
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                  TextButton.icon(
                    icon: const Icon(Icons.add,
                        size: 20, color: Colors.blue), // Icon d·∫•u c·ªông
                    label: const Text(
                      "Th√™m m·ªõi",
                      style: TextStyle(
                          fontSize: 14,
                          color: Colors.blue,
                          fontWeight: FontWeight.normal),
                    ),
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 8,
                          vertical: 4), // ƒêi·ªÅu ch·ªânh padding cho nh·ªè g·ªçn
                      minimumSize:
                          Size.zero, // Cho ph√©p n√∫t co l·∫°i theo n·ªôi dung
                      tapTargetSize: MaterialTapTargetSize
                          .shrinkWrap, // Gi·∫£m v√πng ch·∫°m th·ª´a
                    ),
                    onPressed: () {
                      Get.to(() => Addpets());
                    },
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Obx(() => Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.blue),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        isExpanded: true,
                        value: controller.selectedPet.value.isEmpty
                            ? null
                            : controller.selectedPet.value,
                        hint: const Text('Ch·ªçn th√∫ c∆∞ng'),
                        items: petsController.pets.map((pet) {
                          return DropdownMenuItem<String>(
                            value: pet.idthucung
                                .toString(), // d√πng idthucung l√†m value
                            child: Text(pet.tenthucung),
                          );
                        }).toList(),
                        onChanged: (value) {
                          controller.selectedPet.value = value ?? '';
                        },
                      ),
                    ),
                  )),

              const SizedBox(height: 24),

              // Ch·ªçn d·ªãch v·ª•
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    "üõÅ D·ªãch v·ª•",
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                  const SizedBox(height: 8),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.list_alt_rounded),
                    label: Obx(() => Text(controller.selectedServiceIds.isEmpty
                        ? 'Ch·ªçn d·ªãch v·ª•'
                        : 'ƒê√£ ch·ªçn ${controller.selectedServiceIds.length} d·ªãch v·ª•')),
                    style: ElevatedButton.styleFrom(
                      minimumSize: const Size(double.infinity, 48),
                      backgroundColor: Colors.white, // M√†u n·ªÅn
                      foregroundColor: Colors.blue, // M√†u ch·ªØ v√† icon
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: const BorderSide(color: Colors.blue)),
                    ),
                    onPressed: () {
                      Get.bottomSheet(
                        const ServiceModalContent(),
                        backgroundColor: Colors.white,
                        isScrollControlled: true, // Cho ph√©p n·ªôi dung d√†i h∆°n
                        shape: const RoundedRectangleBorder(
                          borderRadius:
                              BorderRadius.vertical(top: Radius.circular(16)),
                        ),
                      );
                    },
                  ),
                  // Hi·ªÉn th·ªã t√™n c√°c d·ªãch v·ª• ƒë√£ ch·ªçn (t√πy ch·ªçn)
                  Obx(() {
                    if (controller.selectedServiceIds.isNotEmpty) {
                      return Padding(
                        padding: const EdgeInsets.only(top: 8.0),
                        child: Text(
                          "ƒê√£ ch·ªçn: ${controller.getSelectedServiceNames()}",
                          style: const TextStyle(color: Colors.black54),
                        ),
                      );
                    }
                    return const SizedBox.shrink();
                  }),
                ],
              ),
              const SizedBox(height: 24),

              // Ch·ªçn ng√†y
              const Text(
                "üóìÔ∏è Ng√†y h·∫πn",
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              const SizedBox(height: 8),
              Obx(() => GestureDetector(
                    onTap: () async {
                      DateTime? picked = await showDatePicker(
                        context: context,
                        initialDate: controller.selectedDate.value,
                        firstDate: DateTime.now(),
                        lastDate: DateTime.now().add(const Duration(days: 14)),
                      );
                      if (picked != null) {
                        controller.selectedDate.value = picked;
                      }
                    },
                    child: Container(
                      width: double.infinity,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 14),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(DateFormat('dd/MM/yyyy')
                              .format(controller.selectedDate.value)),
                          const Icon(Icons.calendar_today, color: Colors.blue),
                        ],
                      ),
                    ),
                  )),

              const SizedBox(height: 24),

              //  Ph·∫ßn Ch·ªçn gi·ªù - d√πng Wrap c√°c ChoiceChip
              const Text(
                "‚è∞ Gi·ªù h·∫πn",
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              const SizedBox(height: 8),
              Obx(() {
                if (controller.displayableTimeSlots.isEmpty) {
                  return Container(
                    width: double.infinity,
                    padding: const EdgeInsets.symmetric(
                        horizontal: 16, vertical: 14),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.orange),
                    ),
                    child: Text(
                      controller.selectedDate.value.isBefore(DateTime(
                              DateTime.now().year,
                              DateTime.now().month,
                              DateTime.now().day))
                          ? 'Vui l√≤ng ch·ªçn ng√†y hi·ªán t·∫°i ho·∫∑c t∆∞∆°ng lai.'
                          : 'Kh√¥ng c√≥ khung gi·ªù l√†m vi·ªác cho ng√†y n√†y.',
                      style: TextStyle(color: Colors.orange[700]),
                      textAlign: TextAlign.center,
                    ),
                  );
                }

                bool hasAnySelectableSlots = controller.displayableTimeSlots
                    .any((slot) => slot.isSelectable);

                if (!hasAnySelectableSlots) {
                  return Container(
                    width: double.infinity,
                    padding: const EdgeInsets.symmetric(
                        horizontal: 16, vertical: 14),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.orange),
                    ),
                    child: Text(
                      'T·∫•t c·∫£ c√°c khung gi·ªù cho ng√†y n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ho·∫∑c ƒë√£ qua. Vui l√≤ng th·ª≠ ng√†y kh√°c.',
                      style: TextStyle(color: Colors.orange[700]),
                      textAlign: TextAlign.center,
                    ),
                  );
                }

                return Wrap(
                  spacing: 8.0,
                  runSpacing: 8.0,
                  children: controller.displayableTimeSlots.map((slotInfo) {
                    final TimeOfDay time = slotInfo.time;
                    final bool isCurrentlySelected =
                        controller.selectedTime.value?.hour == time.hour &&
                            controller.selectedTime.value?.minute ==
                                time.minute;
                    final bool isSelectable = slotInfo.isSelectable;

                    Color chipBackgroundColor;
                    Color labelColor;
                    TextDecoration labelDecoration = TextDecoration.none;
                    BorderSide borderSide;
                    String suffix = "";
                    double elevation = 0;

                    if (isCurrentlySelected && isSelectable) {
                      chipBackgroundColor = Colors.blue;
                      labelColor = Colors.white;
                      borderSide = BorderSide(color: Colors.blue);
                      elevation = 2;
                    } else if (!isSelectable) {
                      chipBackgroundColor = Colors.grey.shade300;
                      labelColor = Colors.grey.shade500;
                      labelDecoration = TextDecoration.lineThrough;
                      borderSide = BorderSide(color: Colors.grey.shade300);
                      if (slotInfo.isBooked) suffix = " (ƒê√£ ƒë·∫∑t)";
                    } else {
                      chipBackgroundColor = Colors.grey[200]!;
                      labelColor = Colors.black87;
                      borderSide = BorderSide(color: Colors.grey.shade400);
                    }

                    return ChoiceChip(
                      label: Text('${time.format(context)}$suffix'),
                      selected: isCurrentlySelected && isSelectable,
                      backgroundColor: chipBackgroundColor,
                      selectedColor: Colors.blue,
                      disabledColor: Colors.grey.shade300,
                      labelStyle: TextStyle(
                        color: labelColor,
                        decoration: labelDecoration,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                        side: borderSide,
                      ),
                      elevation: elevation,
                      onSelected: (bool selectedValue) {
                        if (isSelectable) {
                          if (selectedValue) {
                            controller.selectedTime.value = time;
                          } else {}
                        }
                      },
                    );
                  }).toList(),
                );
              }),

              const SizedBox(height: 24),

              Obx(() => Card(
                    color: Colors.white,
                    elevation: 4,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(16)),
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Th√¥ng tin ƒë·∫∑t l·ªãch',
                            style: TextStyle(
                                fontSize: 18, fontWeight: FontWeight.bold),
                          ),
                          const SizedBox(height: 12),
                          Text('üë§ Ng∆∞·ªùi d√πng: ${controller.userName.value}'),
                          Text(
                              'üìû S·ªë ƒëi·ªán tho·∫°i: ${controller.phoneNumber.value}'),
                          Text('üè† ƒê·ªãa ch·ªâ: ${controller.address.value}'),
                          const Divider(height: 24, thickness: 1),
                          Text(
                              'üêæ Th√∫ c∆∞ng: ${controller.getSelectedPetName()}'),
                          Text(
                              'üõÅ D·ªãch v·ª•: ${controller.getSelectedServiceNames()}'),
                          Text(
                              'üóìÔ∏è Ng√†y: ${DateFormat('dd/MM/yyyy').format(controller.selectedDate.value)}'),
                          // Text(
                          //     '‚è∞ Gi·ªù: ${controller.selectedTime.value.format(Get.context!)}'),
                          Text(
                              '‚è∞ Gi·ªù: ${controller.selectedTime.value != null ? controller.selectedTime.value!.format(context) : "Ch∆∞a ch·ªçn"}'),
                        ],
                      ),
                    ),
                  )),

              const SizedBox(height: 24),

              // N√∫t ƒë·∫∑t l·ªãch
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                    icon: const Icon(
                      Icons.check,
                      size: 24,
                      color: Colors.white,
                    ),
                    label: const Text(
                      'ƒê·∫∑t l·ªãch ngay',
                      style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.white),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      elevation: 4,
                    ),
                    onPressed: () async {
                      bool confirm = await showDialog(
                        context: context,
                        builder: (context) => AlertDialog(
                          title: const Text('X√°c nh·∫≠n ƒë·∫∑t l·ªãch'),
                          content: const Text(
                              'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t l·ªãch h·∫πn n√†y kh√¥ng?'),
                          actions: [
                            TextButton(
                              onPressed: () => Navigator.of(context).pop(false),
                              child: const Text('H·ªßy'),
                            ),
                            TextButton(
                              onPressed: () => Navigator.of(context).pop(true),
                              child: const Text('X√°c nh·∫≠n'),
                            ),
                          ],
                        ),
                      );

                      if (confirm == true) {
                        bool success = await controller
                            .submitBooking(); // submitBooking s·∫Ω tr·∫£ v·ªÅ true n·∫øu h·ª£p l·ªá

                        if (success) {
                          await Future.delayed(const Duration(seconds: 2));
                          controller.resetBookingForm();
                          Get.offNamed('/appointmentList');
                        }
                      }
                    }),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
