import 'dart:async';
import 'package:booking_petcare/Model/Services/ServicesModel.dart';
import 'package:booking_petcare/Services/APICaller.dart';
import 'package:booking_petcare/Utils/Utils.dart';
import 'package:get/get.dart';

class ServiceController extends GetxController {
  final RxList<ServicesModel> services = <ServicesModel>[].obs; // D·ªãch v·ª• g·ªëc
  final RxList<ServicesModel> filteredServices =
      <ServicesModel>[].obs; // D·ªãch v·ª• ƒë√£ l·ªçc
  final RxBool isLoading = true.obs;

  @override
  void onInit() {
    super.onInit();
    fetchServices(); // L·∫•y d·ªãch v·ª• khi controller ƒë∆∞·ª£c kh·ªüi t·∫°o
  }

  // H√†m l·∫•y danh s√°ch d·ªãch v·ª•
  Future<void> fetchServices() async {
    try {
      isLoading.value = true;
      print('üì° G·ªçi API getdichvu.php...');

      var response =
          await APICaller.getInstance().get('User/Dichvu/getdichvu.php');

      if (response == null) {
        throw Exception('API tr·∫£ v·ªÅ null');
      }

      if (response is List) {
        var parsedServices = response
            .map((e) {
              try {
                return ServicesModel.fromJson(e);
              } catch (error) {
                print('L·ªói parse JSON: $error v·ªõi d·ªØ li·ªáu: $e');
                return null;
              }
            })
            .whereType<ServicesModel>()
            .toList();

        services.assignAll(parsedServices);
        filteredServices
            .assignAll(parsedServices); // L∆∞u d·ªãch v·ª• v√†o filteredServices
      } else {
        throw Exception('D·ªØ li·ªáu API kh√¥ng ph·∫£i danh s√°ch');
      }
    } catch (e) {
      print('L·ªói khi l·∫•y d·ªãch v·ª•: $e');
      Utils.showSnackBar(
          title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•');
    } finally {
      isLoading.value = false;
    }
  }

  // H√†m t√¨m ki·∫øm d·ªãch v·ª•
  void filterServices(String query) async {
    if (query.isEmpty) {
      // N·∫øu √¥ t√¨m ki·∫øm r·ªóng, g√°n l·∫°i to√†n b·ªô d·ªãch v·ª• cho filteredServices
      filteredServices.assignAll(services);
      return;
    }

    try {
      isLoading.value = true;
      print('G·ªçi API t√¨m ki·∫øm v·ªõi query: $query');
      final response = await APICaller.getInstance()
          .get('User/Dichvu/timkiemdichvu.php?searchTerm=$query');

      if (response == null || response is! List) {
        throw Exception("API t√¨m ki·∫øm tr·∫£ v·ªÅ null");
      }

      var parsed = response.map((e) {
        return ServicesModel.fromJson(e);
      }).toList();

      // C·∫≠p nh·∫≠t danh s√°ch d·ªãch v·ª• ƒë√£ l·ªçc
      filteredServices.assignAll(parsed);
    } catch (e) {
      print('L·ªói t√¨m ki·∫øm d·ªãch v·ª•: $e');
      Utils.showSnackBar(title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t√¨m ki·∫øm d·ªãch v·ª•');
    } finally {
      isLoading.value = false;
    }
  }
}
