import 'dart:async';
import 'package:booking_petcare/Model/Blog/BlogModel.dart';
import 'package:booking_petcare/Services/APICaller.dart';
import 'package:booking_petcare/Utils/Utils.dart';
import 'package:get/get.dart';

class BlogController extends GetxController {
  final RxList<BlogModel> blogs = <BlogModel>[].obs; // Danh s√°ch blog g·ªëc
  final RxList<BlogModel> filteredBlogs = <BlogModel>[].obs; // Blog ƒë√£ l·ªçc
  final RxBool isLoadingBlogs = true.obs;

  @override
  void onInit() {
    super.onInit();
    fetchBlogs(); // G·ªçi API khi controller ƒë∆∞·ª£c kh·ªüi t·∫°o
  }

  // H√†m l·∫•y danh s√°ch blog t·ª´ API
  Future<void> fetchBlogs() async {
    try {
      isLoadingBlogs.value = true;
      print('üì° G·ªçi API getblogs.php...');

      var response =
          await APICaller.getInstance().get('User/Blogs/getblogs.php');

      if (response == null) {
        throw Exception('API tr·∫£ v·ªÅ null');
      }

      if (response is List) {
        var parsedBlogs = response
            .map((e) {
              try {
                return BlogModel.fromJson(e);
              } catch (error) {
                print('‚ùå L·ªói parse JSON: $error v·ªõi d·ªØ li·ªáu: $e');
                return null;
              }
            })
            .whereType<BlogModel>()
            .toList();

        blogs.assignAll(parsedBlogs);
        filteredBlogs.assignAll(parsedBlogs);
        print('‚úÖ ƒê√£ load ${parsedBlogs.length} blogs');
      } else {
        throw Exception('D·ªØ li·ªáu API kh√¥ng ph·∫£i l√† danh s√°ch');
      }
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y blogs: $e');
      Utils.showSnackBar(
          title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch blogs');
    } finally {
      isLoadingBlogs.value = false;
    }
  }

  // H√†m t√¨m ki·∫øm blog theo t·ª´ kh√≥a
  Future<void> filterBlogs(String query) async {
    if (query.isEmpty) {
      filteredBlogs.assignAll(blogs);
      return;
    }

    try {
      isLoadingBlogs.value = true;
      print('üîé G·ªçi API t√¨m ki·∫øm v·ªõi query: $query');

      final response = await APICaller.getInstance().get(
          'User/Blogs/timkiemblog.php',
          queryParams: {"searchTerm": query});

      if (response == null || response is! List) {
        throw Exception('API t√¨m ki·∫øm tr·∫£ v·ªÅ null ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
      }

      var parsedBlogs = response
          .map((e) {
            try {
              return BlogModel.fromJson(e);
            } catch (error) {
              print('‚ùå L·ªói parse JSON khi t√¨m ki·∫øm: $error v·ªõi d·ªØ li·ªáu: $e');
              return null;
            }
          })
          .whereType<BlogModel>()
          .toList();

      if (parsedBlogs.isEmpty) {
        Utils.showSnackBar(
            title: 'Kh√¥ng c√≥ k·∫øt qu·∫£',
            message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o ph√π h·ª£p');
      }

      filteredBlogs.assignAll(parsedBlogs);
    } catch (e) {
      print('‚ùå L·ªói khi t√¨m ki·∫øm blogs: $e');
      Utils.showSnackBar(title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t√¨m ki·∫øm blog');
    } finally {
      isLoadingBlogs.value = false;
    }
  }
}
