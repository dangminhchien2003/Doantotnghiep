import 'dart:async';
import 'dart:convert';
import 'package:booking_petcare/Global/Constant.dart';
import 'package:booking_petcare/Global/GlobalValue.dart';
import 'package:booking_petcare/Model/Pets/PetModel.dart';
import 'package:booking_petcare/Services/APICaller.dart';
import 'package:booking_petcare/Utils/Utils.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get/get_connect/http/src/response/response.dart' as http;

class PetsController extends GetxController {
  final RxList<PetModel> pets = <PetModel>[].obs; // Danh s√°ch th√∫ c∆∞ng g·ªëc
  final RxList<PetModel> filteredPets =
      <PetModel>[].obs; // Danh s√°ch sau khi l·ªçc/t√¨m ki·∫øm
  final RxBool isLoading = true.obs;

  @override
  void onInit() {
    super.onInit();
    fetchPets(); // Khi controller kh·ªüi t·∫°o s·∫Ω load lu√¥n danh s√°ch th√∫ c∆∞ng
  }

  // H√†m l·∫•y to√†n b·ªô danh s√°ch th√∫ c∆∞ng
  Future<void> fetchPets() async {
    try {
      isLoading.value = true;
      print('üì° G·ªçi API User/Thucung/getthucung.php...');

      String? idNguoiDung =
          await Utils.getStringValueWithKey(Constant.ID_NGUOIDUNG);
      if (idNguoiDung == null) {
        throw Exception('‚ùó Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng trong b·ªô nh·ªõ');
      }
      var response = await APICaller.getInstance()
          .get('User/Thucung/getthucungbynguoidung.php', queryParams: {
        "idnguoidung": idNguoiDung,
      });

      if (response == null || response is! List) {
        throw Exception('API tr·∫£ v·ªÅ null ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
      }

      var parsedPets = response
          .map((e) {
            try {
              return PetModel.fromJson(e);
            } catch (error) {
              print('üêû L·ªói parse PetModel: $error v·ªõi d·ªØ li·ªáu: $e');
              return null;
            }
          })
          .whereType<PetModel>()
          .toList();

      pets.assignAll(parsedPets);
      filteredPets.assignAll(parsedPets);
    } catch (e) {
      print('üêû L·ªói khi l·∫•y th√∫ c∆∞ng: $e');
      Utils.showSnackBar(
          title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√∫ c∆∞ng');
    } finally {
      isLoading.value = false;
    }
  }

  // H√†m t√¨m ki·∫øm th√∫ c∆∞ng t·ª´ server
  Future<void> searchPets(String query) async {
    if (query.isEmpty) {
      // N·∫øu √¥ t√¨m ki·∫øm r·ªóng, reload l·∫°i to√†n b·ªô
      fetchPets();
      return;
    }

    try {
      isLoading.value = true;
      print(
          'üì° G·ªçi API User/Thucung/timkiemthucung.php v·ªõi searchTerm: $query');
      String? idNguoiDung =
          await Utils.getStringValueWithKey(Constant.ID_NGUOIDUNG);
      if (idNguoiDung == null) {
        throw Exception('‚ùó Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng trong b·ªô nh·ªõ');
      }

      final response = await APICaller.getInstance()
          .get('User/Thucung/timkiemthucung.php', queryParams: {
        "searchTerm": query,
        "idnguoidung": idNguoiDung,
      });

      if (response == null || response is! List) {
        throw Exception('API t√¨m ki·∫øm tr·∫£ v·ªÅ null ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
      }

      var parsedPets = response
          .map((e) {
            try {
              return PetModel.fromJson(e);
            } catch (error) {
              print(
                  'üêû L·ªói parse PetModel khi t√¨m ki·∫øm: $error v·ªõi d·ªØ li·ªáu: $e');
              return null;
            }
          })
          .whereType<PetModel>()
          .toList();

      filteredPets.assignAll(parsedPets);
    } catch (e) {
      print('üêû L·ªói t√¨m ki·∫øm th√∫ c∆∞ng: $e');
      Utils.showSnackBar(title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t√¨m ki·∫øm th√∫ c∆∞ng');
    } finally {
      isLoading.value = false;
    }
  }

  //th√™m th√∫ c∆∞ng
  Future<void> addPet({
    required String tenthucung,
    required String loaithucung,
    required String giongloai,
    required int tuoi,
    required int cannang,
    required String suckhoe,
  }) async {
    try {
      isLoading.value = true;
      print('üì° G·ªçi API User/Thucung/addthucung.php...');

      String? idNguoiDung =
          await Utils.getStringValueWithKey(Constant.ID_NGUOIDUNG);
      if (idNguoiDung == null) {
        throw Exception('‚ùó Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng trong b·ªô nh·ªõ');
      }

      final Map<String, dynamic> body = {
        "tenthucung": tenthucung,
        "idnguoidung": idNguoiDung,
        "loaithucung": loaithucung,
        "giongloai": giongloai,
        "tuoi": tuoi,
        "cannang": cannang,
        "suckhoe": suckhoe,
      };

      final response = await APICaller.getInstance()
          .post('User/Thucung/themthucung.php', body);

      if (response != null && response['success'] == true) {
        Utils.showSnackBar(title: 'Th√†nh c√¥ng', message: response['message']);
        await fetchPets(); // Ho·∫∑c t·ª± th√™m v√†o danh s√°ch pets lu√¥n n·∫øu b·∫°n mu·ªën nhanh h∆°n
      } else {
        throw Exception(response?['message'] ?? 'Th√™m th√∫ c∆∞ng th·∫•t b·∫°i');
      }
    } catch (e) {
      print('üêû L·ªói khi th√™m th√∫ c∆∞ng: $e');
      Utils.showSnackBar(title: 'L·ªói', message: e.toString());
    } finally {
      isLoading.value = false;
    }
  }

  // H√†m s·ª≠a th√∫ c∆∞ng
  Future<void> editPet({
    required String idthucung, // Kh√¥ng s·ª≠a idthucung
    required String tenthucung,
    required String loaithucung,
    required String giongloai,
    required int tuoi,
    required int cannang,
    required String suckhoe,
  }) async {
    try {
      isLoading.value = true;
      print('üì° G·ªçi API User/Thucung/suathucung.php...');

      String? idNguoiDung =
          await Utils.getStringValueWithKey(Constant.ID_NGUOIDUNG);
      if (idNguoiDung == null) {
        throw Exception('‚ùó Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng trong b·ªô nh·ªõ');
      }

      // T·∫°o body v·ªõi t·∫•t c·∫£ th√¥ng tin c·∫ßn thi·∫øt, bao g·ªìm idthucung
      final Map<String, dynamic> body = {
        "idthucung": idthucung, // C·∫ßn truy·ªÅn idthucung v√†o body
        "tenthucung": tenthucung,
        "loaithucung": loaithucung,
        "giongloai": giongloai,
        "tuoi": tuoi,
        "cannang": cannang,
        "suckhoe": suckhoe,
      };

      final response = await APICaller.getInstance()
          .post('User/Thucung/suathucung.php', body);

      if (response != null && response['success'] == true) {
        Utils.showSnackBar(title: 'Th√†nh c√¥ng', message: response['message']);

        // Sau khi s·ª≠a, t·∫£i l·∫°i danh s√°ch th√∫ c∆∞ng ƒë·ªÉ ƒë·∫£m b·∫£o th√¥ng tin m·ªõi nh·∫•t
        await fetchPets();

        // C·∫≠p nh·∫≠t th√∫ c∆∞ng trong b·ªô nh·ªõ n·∫øu c·∫ßn
        int index = pets.indexWhere((pet) => pet.idthucung == idthucung);
        if (index != -1) {
          pets[index] = PetModel.fromJson(response['data']);
          filteredPets.assignAll(pets); // C·∫≠p nh·∫≠t danh s√°ch l·ªçc n·∫øu c·∫ßn
        }
      } else {
        throw Exception(response?['message'] ?? 'S·ª≠a th√∫ c∆∞ng th·∫•t b·∫°i');
      }
    } catch (e) {
      print('üêû L·ªói khi s·ª≠a th√∫ c∆∞ng: $e');
      Utils.showSnackBar(title: 'L·ªói', message: e.toString());
    } finally {
      isLoading.value = false;
    }
  }

  Future<dynamic> deletePet(String idthucung) async {
    try {
      isLoading.value = true;

      // T·∫°o d·ªØ li·ªáu body ƒë·ªÉ g·ª≠i ƒëi d∆∞·ªõi d·∫°ng JSON
      Map<String, dynamic> body = {'idthucung': idthucung};

      // G·ªçi ph∆∞∆°ng th·ª©c API POST v·ªõi d·ªØ li·ªáu body
      final response = await APICaller.getInstance().post(
          'User/Thucung/xoathucung.php',
          body); // D√πng ph∆∞∆°ng th·ª©c post thay v√¨ delete

      if (response != null && response['success'] == true) {
        // X√≥a th√∫ c∆∞ng th√†nh c√¥ng, lo·∫°i b·ªè n√≥ kh·ªèi danh s√°ch
        pets.removeWhere((pet) => pet.idthucung.toString() == idthucung);
        filteredPets.assignAll(pets); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch filteredPets
        Get.snackbar('Th√†nh c√¥ng', 'ƒê√£ x√≥a th√∫ c∆∞ng th√†nh c√¥ng!',
            backgroundColor: Colors.green, colorText: Colors.white);
      } else {
        // N·∫øu c√≥ l·ªói t·ª´ API, throw l·ªói
        throw Exception(response['message'] ?? 'X√≥a th√∫ c∆∞ng th·∫•t b·∫°i');
      }
    } catch (e) {
      print('üêû L·ªói khi x√≥a th√∫ c∆∞ng: $e');
      Utils.showSnackBar(title: 'L·ªói', message: e.toString());
    } finally {
      isLoading.value = false;
    }
  }
}
