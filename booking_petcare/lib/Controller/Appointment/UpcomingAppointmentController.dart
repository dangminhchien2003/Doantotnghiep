import 'dart:async';
import 'package:booking_petcare/Global/Constant.dart';
import 'package:booking_petcare/Model/Appointment/AppointmentModel.dart';
import 'package:booking_petcare/Services/APICaller.dart';
import 'package:booking_petcare/Utils/Utils.dart';
import 'package:get/get.dart';

class UpcomingAppointmentController extends GetxController {
  final RxList<AppointmentModel> appointments =
      <AppointmentModel>[].obs; // L·ªãch h·∫πn g·ªëc
  final RxList<AppointmentModel> filteredAppointments =
      <AppointmentModel>[].obs; // L·ªãch h·∫πn ƒë√£ l·ªçc
  final RxBool isLoadingAppointments = true.obs;

  // ƒê·ªÉ l∆∞u kho·∫£ng ng√†y l·ªçc
  Rx<DateTime?> fromDate = Rx<DateTime?>(null);
  Rx<DateTime?> toDate = Rx<DateTime?>(null);

  @override
  void onInit() {
    super.onInit();
    fetchUpcomingAppointments(); // L·∫•y l·ªãch h·∫πn khi controller ƒë∆∞·ª£c kh·ªüi t·∫°o
  }

  // H√†m l·∫•y danh s√°ch l·ªãch h·∫πn
  Future<void> fetchUpcomingAppointments() async {
    try {
      isLoadingAppointments.value = true;
      print('üì° G·ªçi API getlichhensaptoi.php...');

      String? idNguoiDung =
          await Utils.getStringValueWithKey(Constant.ID_NGUOIDUNG);

      if (idNguoiDung == null) {
        throw Exception('‚ùó Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng trong b·ªô nh·ªõ');
      }

      var response = await APICaller.getInstance()
          .get('User/Lichhen/getlichhensaptoi.php', queryParams: {
        "idnguoidung": idNguoiDung,
      });

      if (response == null) {
        throw Exception('API tr·∫£ v·ªÅ null');
      }

      if (response is List) {
        var parsedAppointments = response
            .map((e) {
              try {
                return AppointmentModel.fromJson(e);
              } catch (error) {
                print('‚ùå L·ªói khi parse JSON: $error v·ªõi d·ªØ li·ªáu: $e');
                return null;
              }
            })
            .whereType<AppointmentModel>()
            .toList();

        appointments.assignAll(parsedAppointments);
        filteredAppointments.assignAll(
            parsedAppointments); // L∆∞u l·ªãch h·∫πn v√†o filteredAppointments
      } else if (response is Map && response.containsKey('data')) {
        var parsedAppointments = (response['data'] as List)
            .map((e) {
              try {
                return AppointmentModel.fromJson(e);
              } catch (error) {
                print('‚ùå L·ªói parse JSON: $error v·ªõi d·ªØ li·ªáu: $e');
                return null;
              }
            })
            .whereType<AppointmentModel>()
            .toList();

        appointments.assignAll(parsedAppointments);
        filteredAppointments.assignAll(
            parsedAppointments); // L∆∞u l·ªãch h·∫πn v√†o filteredAppointments
      } else {
        throw Exception('Ph·∫£n h·ªìi API kh√¥ng h·ª£p l·ªá');
      }
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y l·ªãch h·∫πn s·∫Øp t·ªõi: $e');
      Utils.showSnackBar(
          title: 'L·ªói', message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch h·∫πn s·∫Øp t·ªõi');
    } finally {
      isLoadingAppointments.value = false;
    }
  }

  // H√†m l·ªçc l·ªãch h·∫πn theo kho·∫£ng ng√†y
  void filterAppointments() {
    if (fromDate.value == null || toDate.value == null) {
      filteredAppointments.assignAll(appointments);
      return;
    }

    filteredAppointments.assignAll(appointments.where((appt) {
      final apptDate = DateTime.parse(appt.ngayhen); // yyyy-MM-dd
      return apptDate
              .isAfter(fromDate.value!.subtract(const Duration(days: 1))) &&
          apptDate.isBefore(toDate.value!.add(const Duration(days: 1)));
    }).toList());
  }

  // C·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu l·ªçc
  void setFromDate(DateTime date) {
    fromDate.value = date;
    filterAppointments();
  }

  // C·∫≠p nh·∫≠t ng√†y k·∫øt th√∫c l·ªçc
  void setToDate(DateTime date) {
    toDate.value = date;
    filterAppointments();
  }
}
